// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: list_revisions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listRevisions = `-- name: ListRevisions :many
SELECT
  id,
  recipe_id,
  parent_id,
  recipe_description,
  change_comment,
  title,
  publish_date,
  photo
FROM
  recipe_revisions
WHERE
  CASE
    WHEN $1::uuid IS NOT NULL THEN $1::uuid = recipe_id
    ELSE true
  END
  AND
  CASE
    WHEN $2::uuid IS NOT NULL THEN $2::uuid = parent_id
    ELSE true
  END
  AND
  CASE
    WHEN $3::timestamp IS NOT NULL THEN publish_date >= $3::timestamp
    ELSE true
  END
  AND
  CASE
    WHEN $4::timestamp IS NOT NULL THEN publish_date <= $4::timestamp
    ELSE true
  END
  AND
  CASE
    WHEN $5::text = 'publish_date' AND $6::bool AND $7::timestamp IS NOT NULL THEN $7::timestamp > publish_date
    ELSE true
  END
  AND
  CASE
    WHEN NOT $6::bool AND $5::text = 'publish_date' AND $7::timestamp IS NOT NULL THEN $7::timestamp < publish_date
    ELSE true
  END
ORDER BY
  CASE WHEN $5::text = 'publish_date' AND $6::bool THEN publish_date END DESC,
  CASE WHEN $5::text = 'publish_date' AND NOT $6::bool THEN publish_date END ASC
LIMIT $8
`

type ListRevisionsParams struct {
	RecipeID      pgtype.UUID
	ParentID      pgtype.UUID
	PublishStart  pgtype.Timestamp
	PublishEnd    pgtype.Timestamp
	SortCol       string
	SortDir       bool
	PublishCursor pgtype.Timestamp
	Limit         int64
}

func (q *Queries) ListRevisions(ctx context.Context, arg ListRevisionsParams) ([]RecipeRevision, error) {
	rows, err := q.db.Query(ctx, listRevisions,
		arg.RecipeID,
		arg.ParentID,
		arg.PublishStart,
		arg.PublishEnd,
		arg.SortCol,
		arg.SortDir,
		arg.PublishCursor,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecipeRevision
	for rows.Next() {
		var i RecipeRevision
		if err := rows.Scan(
			&i.ID,
			&i.RecipeID,
			&i.ParentID,
			&i.RecipeDescription,
			&i.ChangeComment,
			&i.Title,
			&i.PublishDate,
			&i.Photo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
