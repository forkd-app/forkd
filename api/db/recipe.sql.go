// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: recipe.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes(
slug,
author_id,
description,
forked_from
)
VALUES(
$1,
$2,
$3,
$4
) RETURNING
recipes.id,
recipes.slug,
recipes.description,
recipes.author_id,
recipes.forked_from,
recipes.initial_publish_date
`

type CreateRecipeParams struct {
	Slug        string
	AuthorID    int64
	Description pgtype.Text
	ForkedFrom  pgtype.Int8
}

type CreateRecipeRow struct {
	ID                 int64
	Slug               string
	Description        pgtype.Text
	AuthorID           int64
	ForkedFrom         pgtype.Int8
	InitialPublishDate pgtype.Timestamp
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (CreateRecipeRow, error) {
	row := q.db.QueryRow(ctx, createRecipe,
		arg.Slug,
		arg.AuthorID,
		arg.Description,
		arg.ForkedFrom,
	)
	var i CreateRecipeRow
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Description,
		&i.AuthorID,
		&i.ForkedFrom,
		&i.InitialPublishDate,
	)
	return i, err
}

const getRecipeById = `-- name: GetRecipeById :one
SELECT
  recipes.id,
  recipes.slug,
  recipes.description,
  recipes.author_id,
  recipes.forked_from,
  recipes.initial_publish_date
FROM
  recipes
WHERE
  recipes.id = $1
LIMIT 1
`

type GetRecipeByIdRow struct {
	ID                 int64
	Slug               string
	Description        pgtype.Text
	AuthorID           int64
	ForkedFrom         pgtype.Int8
	InitialPublishDate pgtype.Timestamp
}

func (q *Queries) GetRecipeById(ctx context.Context, id int64) (GetRecipeByIdRow, error) {
	row := q.db.QueryRow(ctx, getRecipeById, id)
	var i GetRecipeByIdRow
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Description,
		&i.AuthorID,
		&i.ForkedFrom,
		&i.InitialPublishDate,
	)
	return i, err
}

const getRecipeBySlug = `-- name: GetRecipeBySlug :one
SELECT
recipes.id,
recipes.slug,
recipes.description,
recipes.author_id,
recipes.forked_from,
recipes.initial_publish_date
FROM
recipes
WHERE
recipes.slug = $1
LIMIT 1
`

type GetRecipeBySlugRow struct {
	ID                 int64
	Slug               string
	Description        pgtype.Text
	AuthorID           int64
	ForkedFrom         pgtype.Int8
	InitialPublishDate pgtype.Timestamp
}

func (q *Queries) GetRecipeBySlug(ctx context.Context, slug string) (GetRecipeBySlugRow, error) {
	row := q.db.QueryRow(ctx, getRecipeBySlug, slug)
	var i GetRecipeBySlugRow
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Description,
		&i.AuthorID,
		&i.ForkedFrom,
		&i.InitialPublishDate,
	)
	return i, err
}

const getRecipes = `-- name: GetRecipes :many
SELECT
id, author_id, forked_from, slug, description, initial_publish_date
FROM
recipes
WHERE
recipes.id > $1
ORDER BY
recipes.id
LIMIT $2
`

type GetRecipesParams struct {
	ID    int64
	Limit int32
}

func (q *Queries) GetRecipes(ctx context.Context, arg GetRecipesParams) ([]Recipe, error) {
	rows, err := q.db.Query(ctx, getRecipes, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.ForkedFrom,
			&i.Slug,
			&i.Description,
			&i.InitialPublishDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipesByAuthor = `-- name: GetRecipesByAuthor :many
SELECT
recipes.id,
recipes.slug,
recipes.description,
recipes.author_id,
recipes.forked_from,
recipes.initial_publish_date
FROM
recipes
WHERE
recipes.author_id = $1
AND recipes.id > $2
ORDER BY
recipes.id
LIMIT $3
`

type GetRecipesByAuthorParams struct {
	AuthorID int64
	ID       int64
	Limit    int32
}

type GetRecipesByAuthorRow struct {
	ID                 int64
	Slug               string
	Description        pgtype.Text
	AuthorID           int64
	ForkedFrom         pgtype.Int8
	InitialPublishDate pgtype.Timestamp
}

func (q *Queries) GetRecipesByAuthor(ctx context.Context, arg GetRecipesByAuthorParams) ([]GetRecipesByAuthorRow, error) {
	rows, err := q.db.Query(ctx, getRecipesByAuthor, arg.AuthorID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecipesByAuthorRow
	for rows.Next() {
		var i GetRecipesByAuthorRow
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Description,
			&i.AuthorID,
			&i.ForkedFrom,
			&i.InitialPublishDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
