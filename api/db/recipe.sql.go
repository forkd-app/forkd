// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: recipe.sql

package db

import (
	"context"
)

const getRecipesByAuthor = `-- name: GetRecipesByAuthor :many
SELECT
  id, author_id, forked_from, slug, description, initial_publish_date
FROM
  recipes
WHERE
  recipes.author_id = $1
  AND (CASE
    WHEN $2 IS NOT NULL THEN recipes.id > $2
    ELSE True
  END)
ORDER BY
  $3
LIMIT $4
`

type GetRecipesByAuthorParams struct {
	AuthorID int64
	Column2  interface{}
	Column3  interface{}
	Limit    int32
}

func (q *Queries) GetRecipesByAuthor(ctx context.Context, arg GetRecipesByAuthorParams) ([]Recipe, error) {
	rows, err := q.db.Query(ctx, getRecipesByAuthor,
		arg.AuthorID,
		arg.Column2,
		arg.Column3,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.ForkedFrom,
			&i.Slug,
			&i.Description,
			&i.InitialPublishDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
