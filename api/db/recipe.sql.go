// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: recipe.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (
  slug,
  author_id,
  description,
  forked_from
) VALUES (
  $1,
  $2,
  $3,
  $4
) RETURNING
  id,
  author_id,
  forked_from,
  slug,
  description,
  initial_publish_date
`

type CreateRecipeParams struct {
	Slug        string
	AuthorID    int64
	Description pgtype.Text
	ForkedFrom  pgtype.Int8
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRow(ctx, createRecipe,
		arg.Slug,
		arg.AuthorID,
		arg.Description,
		arg.ForkedFrom,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.ForkedFrom,
		&i.Slug,
		&i.Description,
		&i.InitialPublishDate,
	)
	return i, err
}

const getRecipeById = `-- name: GetRecipeById :one
SELECT
  id,
  author_id,
  forked_from,
  slug,
  description,
  initial_publish_date
FROM
  recipes
WHERE
  id = $1
LIMIT 1
`

func (q *Queries) GetRecipeById(ctx context.Context, id int64) (Recipe, error) {
	row := q.db.QueryRow(ctx, getRecipeById, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.ForkedFrom,
		&i.Slug,
		&i.Description,
		&i.InitialPublishDate,
	)
	return i, err
}

const getRecipeBySlug = `-- name: GetRecipeBySlug :one
SELECT
  id,
  author_id,
  forked_from,
  slug,
  description,
  initial_publish_date
FROM
  recipes
WHERE
  slug = $1
LIMIT 1
`

func (q *Queries) GetRecipeBySlug(ctx context.Context, slug string) (Recipe, error) {
	row := q.db.QueryRow(ctx, getRecipeBySlug, slug)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.ForkedFrom,
		&i.Slug,
		&i.Description,
		&i.InitialPublishDate,
	)
	return i, err
}

const listRecipes = `-- name: ListRecipes :many
SELECT
  id,
  author_id,
  forked_from,
  slug,
  description,
  initial_publish_date
FROM
  recipes
WHERE
  id > $1
ORDER BY id
LIMIT $2
`

type ListRecipesParams struct {
	ID    int64
	Limit int32
}

func (q *Queries) ListRecipes(ctx context.Context, arg ListRecipesParams) ([]Recipe, error) {
	rows, err := q.db.Query(ctx, listRecipes, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.ForkedFrom,
			&i.Slug,
			&i.Description,
			&i.InitialPublishDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecipesByAuthor = `-- name: ListRecipesByAuthor :many
SELECT
  id,
  author_id,
  forked_from,
  slug,
  description,
  initial_publish_date
FROM
  recipes
WHERE
  author_id = $1 AND id > $2
ORDER BY id
LIMIT $3
`

type ListRecipesByAuthorParams struct {
	AuthorID int64
	ID       int64
	Limit    int32
}

func (q *Queries) ListRecipesByAuthor(ctx context.Context, arg ListRecipesByAuthorParams) ([]Recipe, error) {
	rows, err := q.db.Query(ctx, listRecipesByAuthor, arg.AuthorID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.ForkedFrom,
			&i.Slug,
			&i.Description,
			&i.InitialPublishDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
