// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: upsert_user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const upsertUser = `-- name: UpsertUser :one
WITH upsert AS (
  INSERT INTO
    users (
      email,
      display_name,
      join_date
    )
  VALUES (
    $1,
    $2,
    $3
  )
  ON CONFLICT (email)
  DO NOTHING
  RETURNING
    users.id,
    users.display_name,
    users.email,
    users.join_date,
    users.updated_at,
    users.photo
)
SELECT
  upsert.id,
	upsert.display_name,
	upsert.email,
	upsert.join_date,
	upsert.updated_at,
  upsert.photo
FROM
  upsert
UNION
SELECT
  users.id,
	users.display_name,
	users.email,
	users.join_date,
	users.updated_at,
  users.photo
FROM
  users
WHERE
  users.email = $1
`

type UpsertUserParams struct {
	Email       string
	DisplayName string
	JoinDate    pgtype.Timestamp
}

type UpsertUserRow struct {
	ID          pgtype.UUID
	DisplayName string
	Email       string
	JoinDate    pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	Photo       pgtype.Text
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (UpsertUserRow, error) {
	row := q.db.QueryRow(ctx, upsertUser, arg.Email, arg.DisplayName, arg.JoinDate)
	var i UpsertUserRow
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Email,
		&i.JoinDate,
		&i.UpdatedAt,
		&i.Photo,
	)
	return i, err
}
