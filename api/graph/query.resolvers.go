package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"forkd/graph/model"

	"github.com/google/uuid"
)

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*model.UserQuery, error) {
	return &model.UserQuery{}, nil
}

// Recipe is the resolver for the recipe field.
func (r *queryResolver) Recipe(ctx context.Context) (*model.RecipeQuery, error) {
	return &model.RecipeQuery{}, nil
}

// ByID is the resolver for the byId field.
func (r *recipeQueryResolver) ByID(ctx context.Context, obj *model.RecipeQuery, id uuid.UUID) (*model.Recipe, error) {
	return r.RecipeService.GetRecipeByID(ctx, id)
}

// BySlug is the resolver for the bySlug field.
func (r *recipeQueryResolver) BySlug(ctx context.Context, obj *model.RecipeQuery, slug string) (*model.Recipe, error) {
	return r.RecipeService.GetRecipeBySlug(ctx, slug)
}

// List is the resolver for the list field.
func (r *recipeQueryResolver) List(ctx context.Context, obj *model.RecipeQuery, input *model.ListRecipeInput) (*model.PaginatedRecipes, error) {
	return r.RecipeService.ListRecipes(ctx, input)
}

// ByID is the resolver for the byId field.
func (r *userQueryResolver) ByID(ctx context.Context, obj *model.UserQuery, id uuid.UUID) (*model.User, error) {
	return r.UserService.GetByID(ctx, id)
}

// ByEmail is the resolver for the byEmail field.
func (r *userQueryResolver) ByEmail(ctx context.Context, obj *model.UserQuery, email string) (*model.User, error) {
	return r.UserService.GetByEmail(ctx, email)
}

// Current is the resolver for the current field.
func (r *userQueryResolver) Current(ctx context.Context, obj *model.UserQuery) (*model.User, error) {
	return r.UserService.GetCurrent(ctx)
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// RecipeQuery returns RecipeQueryResolver implementation.
func (r *Resolver) RecipeQuery() RecipeQueryResolver { return &recipeQueryResolver{r} }

// UserQuery returns UserQueryResolver implementation.
func (r *Resolver) UserQuery() UserQueryResolver { return &userQueryResolver{r} }

type queryResolver struct{ *Resolver }
type recipeQueryResolver struct{ *Resolver }
type userQueryResolver struct{ *Resolver }
