package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"forkd/graph/model"
	"forkd/util"
)

// User is the resolver for the user field.
func (r *mutationResolver) User(ctx context.Context) (*model.UserMutation, error) {
	return &model.UserMutation{}, nil
}

// Recipe is the resolver for the recipe field.
func (r *mutationResolver) Recipe(ctx context.Context) (*model.RecipeMutation, error) {
	return &model.RecipeMutation{}, nil
}

// Create is the resolver for the create field.
func (r *recipeMutationResolver) Create(ctx context.Context, obj *model.RecipeMutation, input model.CreateRecipeInput) (*model.Recipe, error) {
	return r.RecipeService.CreateRecipe(ctx, input)
}

// AddRevision is the resolver for the addRevision field.
func (r *recipeMutationResolver) AddRevision(ctx context.Context, obj *model.RecipeMutation, input model.AddRevisionInput) (*model.RecipeRevision, error) {
	return r.RecipeService.AddRevision(ctx, input)
}

// RequestMagicLink is the resolver for the requestMagicLink field.
func (r *userMutationResolver) RequestMagicLink(ctx context.Context, obj *model.UserMutation, email string) (string, error) {
	user, err := r.AuthService.UpsertUser(ctx, email)
	if err != nil {
		return "", err
	}
	lookup, err := r.AuthService.CreateMagicLink(ctx, user.ID)
	if err != nil {
		return "", err
	}
	// FIXME: Remove this before we push this to the public internet.
	// THIS SHOULD ONLY BE USED FOR LOCAL TESTING
	if util.GetEnv().GetSendMagicLinkEmail() {
		emailData, err := r.EmailService.SendMagicLink(ctx, lookup.Code, user.Email)
		if err != nil {
			return "", err
		} else if emailData.Data.Failed > 0 || emailData.Data.Succeeded < 1 {
			return "", fmt.Errorf("error sending auth email: %+v", emailData.Data.Failures)
		}
	} else {
		fmt.Printf("MAGIC LINK CODE: %s\n", lookup.Code)
	}
	return lookup.Token, nil
}

// Login is the resolver for the login field.
func (r *userMutationResolver) Login(ctx context.Context, obj *model.UserMutation, code string, token string) (*model.LoginResponse, error) {
	userId, err := r.AuthService.ValidateMagicLink(ctx, code, token)
	if err != nil {
		return nil, err
	}
	result, err := r.AuthService.CreateSession(ctx, userId, &code)
	if err != nil {
		return nil, err
	}
	res := model.LoginResponse{
		Token: result.Token,
		User:  model.UserFromDBType(result.User),
	}
	return &res, nil
}

// Logout is the resolver for the logout field.
func (r *userMutationResolver) Logout(ctx context.Context, obj *model.UserMutation) (bool, error) {
	_, session := r.AuthService.GetUserSessionFromCtx(ctx)
	err := r.AuthService.DeleteSession(ctx, session.ID)
	return err == nil, nil
}

// Update is the resolver for the update field.
func (r *userMutationResolver) Update(ctx context.Context, obj *model.UserMutation, input model.UserUpdateInput) (*model.User, error) {
	return r.UserService.Update(ctx, input)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// RecipeMutation returns RecipeMutationResolver implementation.
func (r *Resolver) RecipeMutation() RecipeMutationResolver { return &recipeMutationResolver{r} }

// UserMutation returns UserMutationResolver implementation.
func (r *Resolver) UserMutation() UserMutationResolver { return &userMutationResolver{r} }

type mutationResolver struct{ *Resolver }
type recipeMutationResolver struct{ *Resolver }
type userMutationResolver struct{ *Resolver }
