type Recipe {
  id: UUID!
  initialPublishDate: Time!
  author: User! @goField(forceResolver: true)
  slug: String!
  forkedFrom: RecipeRevision @goField(forceResolver: true)
  private: Boolean!
  revisions(input: ListRevisionsInput): PaginatedRecipeRevisions!
    @goField(forceResolver: true)
  featuredRevision: RecipeRevision @goField(forceResolver: true)
}

type RecipeRevision {
  id: UUID!
  recipe: Recipe! @goField(forceResolver: true)
  recipeDescription: String
  changeComment: String
  title: String!
  parent: RecipeRevision @goField(forceResolver: true)
  publishDate: Time!
  ingredients: [RecipeIngredient!]! @goField(forceResolver: true)
  steps: [RecipeStep!]! @goField(forceResolver: true)
  rating: Float @goField(forceResolver: true)
  photo: String
}

type RecipeStep {
  id: ID!
  revision: RecipeRevision! @goField(forceResolver: true)
  content: String!
  index: Int!
  photo: String
}

input ListRevisionsInput {
  recipeId: UUID
  parentId: UUID
  publishStart: Time
  publishEnd: Time
  sortCol: ListRecipeSortCol = PUBLISH_DATE
  sortDir: SortDir = DESC
  limit: Int = 20
  nextCursor: String
}
