package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"forkd/graph/model"

	"github.com/google/uuid"
)

// Author is the resolver for the author field.
func (r *recipeResolver) Author(ctx context.Context, obj *model.Recipe) (*model.User, error) {
	author, err := r.UserService.GetByID(ctx, obj.Author.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch author: %w", err)
	}

	return author, nil
}

// ForkedFrom is the resolver for the forkedFrom field.
func (r *recipeResolver) ForkedFrom(ctx context.Context, obj *model.Recipe) (*model.RecipeRevision, error) {
	return r.RecipeService.GetRecipeRevisionById(ctx, obj.ForkedFrom.ID)
}

// Revisions is the resolver for the revisions field.
func (r *recipeResolver) Revisions(ctx context.Context, obj *model.Recipe, input *model.ListRevisionsInput) (*model.PaginatedRecipeRevisions, error) {
	if input == nil {
		sortCol := model.ListRecipeSortColPublishDate
		sortDir := model.SortDirDesc
		limit := 20
		input = &model.ListRevisionsInput{
			RecipeID: &obj.ID,
			Limit:    &limit,
			SortDir:  &sortDir,
			SortCol:  &sortCol,
		}
	} else {
		input.RecipeID = &obj.ID
	}
	return r.RecipeService.ListRecipeRevisions(ctx, input)
}

// FeaturedRevision is the resolver for the featuredRevision field.
func (r *recipeResolver) FeaturedRevision(ctx context.Context, obj *model.Recipe) (*model.RecipeRevision, error) {
	if obj.FeaturedRevision.ID != uuid.Nil {
		return r.RecipeService.GetRecipeRevisionById(ctx, obj.FeaturedRevision.ID)
	}
	return r.RecipeService.GetLatestRecipeRevisionByRecipeId(ctx, obj.ID)
}

// Recipe is the resolver for the recipe field.
func (r *recipeRevisionResolver) Recipe(ctx context.Context, obj *model.RecipeRevision) (*model.Recipe, error) {
	return r.RecipeService.GetRecipeByID(ctx, obj.Recipe.ID)
}

// Parent is the resolver for the parent field.
func (r *recipeRevisionResolver) Parent(ctx context.Context, obj *model.RecipeRevision) (*model.RecipeRevision, error) {
	return r.RecipeService.GetRecipeRevisionById(ctx, obj.Parent.ID)
}

// Ingredients is the resolver for the ingredients field.
func (r *recipeRevisionResolver) Ingredients(ctx context.Context, obj *model.RecipeRevision) ([]*model.RecipeIngredient, error) {
	return r.RecipeService.ListRecipeIngredients(ctx, obj.ID)
}

// Steps is the resolver for the steps field.
func (r *recipeRevisionResolver) Steps(ctx context.Context, obj *model.RecipeRevision) ([]*model.RecipeStep, error) {
	return r.RecipeService.ListRecipeSteps(ctx, obj.ID)
}

// Rating is the resolver for the rating field.
func (r *recipeRevisionResolver) Rating(ctx context.Context, obj *model.RecipeRevision) (*float64, error) {
	rating, err := r.RecipeService.GetRevisionRating(ctx, obj.ID)
	return &rating, err
}

// HasRated is the resolver for the hasRated field.
func (r *recipeRevisionResolver) HasRated(ctx context.Context, obj *model.RecipeRevision) (*bool, error) {
	user, err := r.UserService.GetCurrent(ctx)
	if err != nil {
		return nil, err
	}

	if user == nil || obj == nil {
		return nil, nil
	}
	result, err := r.RecipeService.HasUserRatedRevision(ctx, user.ID, obj.ID)
	return &result, err
}

// Revision is the resolver for the revision field.
func (r *recipeStepResolver) Revision(ctx context.Context, obj *model.RecipeStep) (*model.RecipeRevision, error) {
	return r.RecipeService.GetRecipeRevisionById(ctx, obj.Revision.ID)
}

// Recipe returns RecipeResolver implementation.
func (r *Resolver) Recipe() RecipeResolver { return &recipeResolver{r} }

// RecipeRevision returns RecipeRevisionResolver implementation.
func (r *Resolver) RecipeRevision() RecipeRevisionResolver { return &recipeRevisionResolver{r} }

// RecipeStep returns RecipeStepResolver implementation.
func (r *Resolver) RecipeStep() RecipeStepResolver { return &recipeStepResolver{r} }

type (
	recipeResolver         struct{ *Resolver }
	recipeRevisionResolver struct{ *Resolver }
	recipeStepResolver     struct{ *Resolver }
)
