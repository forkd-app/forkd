package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"forkd/graph/model"
)

// Author is the resolver for the author field.
func (r *recipeResolver) Author(ctx context.Context, obj *model.Recipe) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Author - author"))
}

// ForkedFrom is the resolver for the forkedFrom field.
func (r *recipeResolver) ForkedFrom(ctx context.Context, obj *model.Recipe) (*model.RecipeRevision, error) {
	panic(fmt.Errorf("not implemented: ForkedFrom - forkedFrom"))
}

// Revisions is the resolver for the revisions field.
func (r *recipeResolver) Revisions(ctx context.Context, obj *model.Recipe, limit *int, nextCursor *string) (*model.PaginatedRecipeRevisions, error) {
	panic(fmt.Errorf("not implemented: Revisions - revisions"))
}

// FeaturedRevision is the resolver for the featuredRevision field.
func (r *recipeResolver) FeaturedRevision(ctx context.Context, obj *model.Recipe) (*model.RecipeRevision, error) {
	panic(fmt.Errorf("not implemented: FeaturedRevision - featuredRevision"))
}

// Recipe is the resolver for the recipe field.
func (r *recipeRevisionResolver) Recipe(ctx context.Context, obj *model.RecipeRevision) (*model.Recipe, error) {
	recipe, err := r.db.getRecipeByRecipeID(ctx, obj.RecipeID)

	if err != nil {
		return nil, Errorf("failed to fetch recipe for revision", obj.RecipeID, err)
	}
	return recipe, nil
}

// Parent is the resolver for the parent field.
func (r *recipeRevisionResolver) Parent(ctx context.Context, obj *model.RecipeRevision) (*model.RecipeRevision, error) {
	parent, err := r.db.getParentByParentID(ctx, obj.ParentID)

	if err != nil {
		return nil, fmt.Errorf("failed to fetch parent for revision", obj.ParentID, err)
	}
	return parent, nil
}

// Ingredients is the resolver for the ingredients field.
func (r *recipeRevisionResolver) Ingredients(ctx context.Context, obj *model.RecipeRevision) ([]*model.RecipeIngredient, error) {
	ingredients, err := r.db.ListIngredientsByRevisionID(ctx, obj.RevisionID)

	if err != nil {
		return nil, fmt.Errorf("failed to fetch ingredients for revision", obj.RevisionID, err)
	}
	return ingredients, nil
}

// Steps is the resolver for the steps field.
func (r *recipeRevisionResolver) Steps(ctx context.Context, obj *model.RecipeRevision) ([]*model.RecipeStep, error) {
	steps, err := r.db.ListStepsByRevisionID(ctx. obj.RevisionID)

	if err != nil {
		return nil, fmt.Errorf("failed to fetch steps for revision", obj.RevisionID, err)
	}
	return steps, nil
}

// Rating is the resolver for the rating field.
func (r *recipeRevisionResolver) Rating(ctx context.Context, obj *model.RecipeRevision) (*float64, error) {
	rating := float64(0)

	return &rating, nil
}

// Revision is the resolver for the revision field.
func (r *recipeStepResolver) Revision(ctx context.Context, obj *model.RecipeStep) (*model.RecipeRevision, error) {
	panic(fmt.Errorf("not implemented: Revision - revision"))
}

// Recipe returns RecipeResolver implementation.
func (r *Resolver) Recipe() RecipeResolver { return &recipeResolver{r} }

// RecipeRevision returns RecipeRevisionResolver implementation.
func (r *Resolver) RecipeRevision() RecipeRevisionResolver { return &recipeRevisionResolver{r} }

// RecipeStep returns RecipeStepResolver implementation.
func (r *Resolver) RecipeStep() RecipeStepResolver { return &recipeStepResolver{r} }

type recipeResolver struct{ *Resolver }
type recipeRevisionResolver struct{ *Resolver }
type recipeStepResolver struct{ *Resolver }
