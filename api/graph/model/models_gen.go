// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"time"
)

type PaginatedResult interface {
	IsPaginatedResult()
	GetPagination() *PaginationInfo
}

type Ingredient struct {
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
}

type MeasurementUnit struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

type PaginatedRecipeComments struct {
	Items      []*RecipeComment `json:"items"`
	Pagination *PaginationInfo  `json:"pagination"`
}

func (PaginatedRecipeComments) IsPaginatedResult()                  {}
func (this PaginatedRecipeComments) GetPagination() *PaginationInfo { return this.Pagination }

type PaginatedRecipeRevisions struct {
	Items      []*RecipeRevision `json:"items"`
	Pagination *PaginationInfo   `json:"pagination"`
}

func (PaginatedRecipeRevisions) IsPaginatedResult()                  {}
func (this PaginatedRecipeRevisions) GetPagination() *PaginationInfo { return this.Pagination }

type PaginatedRecipes struct {
	Items      []*Recipe       `json:"items"`
	Pagination *PaginationInfo `json:"pagination"`
}

func (PaginatedRecipes) IsPaginatedResult()                  {}
func (this PaginatedRecipes) GetPagination() *PaginationInfo { return this.Pagination }

type PaginationInfo struct {
	Count      int     `json:"count"`
	NextCursor *string `json:"nextCursor,omitempty"`
}

type Query struct {
}

type Recipe struct {
	InitialPublishDate time.Time                 `json:"initialPublishDate"`
	Author             *User                     `json:"author"`
	Slug               string                    `json:"slug"`
	ForkedFrom         *int                      `json:"forkedFrom,omitempty"`
	ID                 int                       `json:"id"`
	Description        string                    `json:"description"`
	Revisions          *PaginatedRecipeRevisions `json:"revisions"`
}

type RecipeComment struct {
	ID       int             `json:"id"`
	Revision *RecipeRevision `json:"revision"`
	PostDate time.Time       `json:"postDate"`
	Recipe   *Recipe         `json:"recipe"`
	Author   *User           `json:"author"`
	Content  string          `json:"content"`
}

type RecipeIngredient struct {
	Revision   *RecipeRevision  `json:"revision"`
	Unit       *MeasurementUnit `json:"unit"`
	Ingredient *Ingredient      `json:"ingredient"`
	Quantity   float64          `json:"quantity"`
	ID         int              `json:"id"`
	Comment    *string          `json:"comment,omitempty"`
}

type RecipeQuery struct {
	ByID   *Recipe           `json:"byId,omitempty"`
	BySlug *Recipe           `json:"bySlug,omitempty"`
	List   *PaginatedRecipes `json:"list"`
}

type RecipeRevision struct {
	ID          int                 `json:"id"`
	Description *string             `json:"description,omitempty"`
	PublishDate time.Time           `json:"publishDate"`
	Ingredients []*RecipeIngredient `json:"ingredients"`
	Steps       []*RecipeStep       `json:"steps"`
}

type RecipeStep struct {
	ID       int             `json:"id"`
	Revision *RecipeRevision `json:"revision"`
	Content  string          `json:"content"`
	Index    int             `json:"index"`
}

type Tag struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

type User struct {
	JoinDate time.Time                `json:"joinDate"`
	ID       int                      `json:"id"`
	Email    string                   `json:"email"`
	Username string                   `json:"username"`
	Recipes  *PaginatedRecipes        `json:"recipes"`
	Comments *PaginatedRecipeComments `json:"comments"`
}

type UserQuery struct {
	ByID    *User `json:"byId,omitempty"`
	ByEmail *User `json:"byEmail,omitempty"`
}
